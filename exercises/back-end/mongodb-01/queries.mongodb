use("class")
// para rodar, selecionar e clicar na lâmpada que aparece e rodar o código
// selecionar todas as queries que deseja rodar sempre, pq não fica salvo no playground ao lado


// ctrl alt r para rodar todas as queries no playground

show('collections')

// procurar itens com especiifcação:

// itens com tamanho 10 (h é uma chave que está dentro da chave size)
db.inventory.find({ "size.h": 10})

// pesquisar itens com 2 filtros: só utilizar a vírgula entre os critérios
d.inventory.find({
  item: "paper",
  status: "D"
})

// Relacionamentos:
//  são feitos na mesma coleçao, através de documentos embutidos: um doc dentro do outro. Não tem como aproveitar dados de outra coleção. Por exemplo, se duas pessoas tiverem o mesmo endereçi, tem que cadastrar duas vezes, pq não dá pra aproveitar o endereço já cadastrado anteriormente
// 1: 1
use("trybnb")
db.places.insertOne({
  _id: 100,
  name: 'joe streets',
  adress: {
    street: 'rua do amor',
    city: 'paixao',
    country: "Brazil",
  },
  price: 500
})

// 1: N cada usuário com vários endereços: os dados tbm são consolidados dentro do mesmo elemento e ADDRESS seria um array de endereços



use ("trybnb")
db.places.find({
  house_rules: {$regex: "Pro"}},
  // retorna os docs em que house_rules tenham um trecho que possua os caracteres 'Pro', independente da palavra a que fazem parte
  { house_rules: true }
)


use ("trybnb")
db.places.find({ cancellation_policy: { $exists: false } })
// retorna os docs em que não existe a coluna cancellation_pollicy



// altera os valores de nome e street no doc de id numero 100:
use ("trybnb")
db.places.updateOne(
  {_id: 100},
  {$set: {name: "Nova casa da Laura", street: "Aqui mesmo"}
})

